/////////////////////////////////// TITLE //////////////////////////////////////////////////

// formValidation


/////////////////////////////////// INFO ////////////////////////////////////////////////////
//This library was created by Kim Doberstein
//
// Version 2.0  - NOTE this version may not work with pages set up using prevous versions of this library
// Date: 02/12/2010
//
// Basic framework for form and form field validation

// NOTE: This library requries the jQuery framework.  It was tested using version 1.4.1

//This library is composed of two files:
//			jquery.formValidation.js
//			jquery.customValidationFormat.js

// NOTE: Both files should be called in your html files.

//The jquery.formValidation.js  file contains the main validation "engine".  
// The jquery.customValidationFormat.js is a helper file that determines what will happen when
// a form or form element fails/passes validaiton. 

// Edits should not be made to the  jquery.formValidation.js file.  The jquery.customValidationFormat.js file should be edited
// for your own needs.
////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////// SETTING UP YOUR HTML //////////////////////////////////////
// 
// Any form element that is "required" needs to have a  class of "required"
//
//  <input name="text1" type="text" class="required"  />
//
// Note: each radio button in a radio-button group will need have the "required" class

// By default, the FormValidation object will check to see that the form element has a non-empty value.
// AKA something is entered in a textbox/textarea, a item is selected in a select box, checkbox is checked, and
// at least one radio button in a radio group is selected.

// If you want another kind of validation, you need to add a "dataType" class. Build-in reconginzied
// datatypes and directions on how to add your own dataTypes are listed below.
//
//  <input name="text1" type="text" class="required dataType_email" />

//  By default on a given event ("click","blur","keyup"), the form element will be validated. 
//  If you want a particular element to be validated on a different  event, you can add the wanted
//  event in a validateEvent  class:

//<input name="text1" type="text" class="required dataType_email validateEvent_keyup"   />
//
// Lastly you need to let this script what forms should have validation added.  You do this by calling 
// the "setFormValidation()" method.  

// $(document).ready(function(){$('form').setFormValidation();});

// NOTE: The line above is automatically added to the top of the jquery.customValidationFormat.js file.  
// So unless you change it, this script will automatically add validation to "required" elements.


//////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////// WHAT DOES THIS LIBRARY DO - Constructor  ///////////////////////
// As soon as the jquery.formValidation file is called, it will automatically look for custom 
// data types (described below).

// When the setFormValidation method is called (see above), it goes through each form element and if it as a "required" class,
// it automatically adds a listener (usually on click or onblur).  When a user interacts with that form element, 
// that single element is validated.
//
// In addtion, an onsubmit listener is added to the form tag.  When submitted, the form validates each
// form element with a "required" class.  If the all the elements pass validation, the form is sumitted.
// If not, the form is prevented from submitting.  


//////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////// BUILT IN DATA TYPES ///////////////////////////////////////////////
//The following data types are available automatically with this library:


// 		"nonEmpty" - Default - check to see that the form element has a non-empty value
// 		"umIDNum" - Checks to see if the user entered 7 numerical charicters
// 		"date4Year" - Checks to see if the data was entered in the following format: mm/dd/yyyy
// 		"phone" - Checks to see if the data entered is in the folloing format: xxx-xxx-xxxx.  Note area code is required, but dashes are optional.
// 		"numerical" - Checks to see if data entered only contains numbers.  If the "numlength" attribute is set, will make sure the length is equal to the "numlength" attribute.
// 		"email" - Checks to see if data entered is in the format of an email address.
// 		"currency" - Checks to see if the user entered a dollar ammount - note a "$" before the number is optional as are commas.
// 		"gpa"- Checks to see if a user entered a value between 0.00 and 4.00".
//		"fourDigitYear"- Checks to see if a user entered nothing or a valid four digit year
// 		"minLength" - The user must enter a minimum number of charicters.  The class should end in the minimum number of charicters to pass validation.  For example "dataType_minLength_15"
// 		"maxLength" - The user must enter under  maximum number of charicters.  The class should end in the maximum number of charicters to pass validation.  For example "dataType_maxLength_50"

//*** Note: the above must start with "dataType_" when added as a class.  For example: 
// 			<input type="text" class="required dataType_phone" id="phone" name="phone" />

//////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////// ADDING A DATA TYPE ///////////////////////////////////////////////
// If you need a data type that is not listed above, you can easily add one.
//  First you need to create a function that will be called to validate your new datatype.
// The function must contain only one parameter - a pointer to the form element and it must return
// an object in this format: {"result":true/false, "message":"Your error message here"}
//
// EXAMPLE:
//function mustBeKimFunct(field){
//	var result=false;
	
//	if($(field).val()=="Kim") 	result=true;
//	return {"result":result, "message":"This field must be set to 'Kim'"};
//}
//
//
// Next you need to create an array called: validationDataTypesArray
// Then add a member to this array using this format:
// validationDataTypesArray[dataTypeName]={"function":functionName};
//
// EXAMPLE:  
// var validationDataTypesArray=new Array();
// validationDataTypesArray["mustBeKim"]={"function":mustBeKimFunct};

// Note you can add as may entries as needed.  
// It is recommended that you save this at the top of the jquery.customValidationFormat.js file


// After using the method described above, the following form element will be validated correctly:
// <input name="text2" type="text" required="required dataType_mustBeKim"  />
//
// NOTE: Any custom dataType will override any build-in dataType.
//////////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////// OPTIONAL ADDITIONAL FUNCTIONS /////////////////////////////////////
//The main functions inside of jquery.formValidation.js will call the following funcitons (if available)
//
//		formValidationRequiredElementInit
//		formValidationRemoveRequiredElement
//		fieldValidationFail
//		fieldValidationPass
//		formValidationFail
//		formValidationPass
//
// Note: these functions are not required for this library to function correctly
// Note: examples of these functions are saved in the jquery.customValidationFormat.js file  see that file
// for more information

//////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////USING THIS LIBRARY WITH AJAX AND DOM SCRIPTING////////////////////////
// There are a whole series of jQuery methods to add/remove validation that you can call:
//
//		setFormValidation() - set the validation for an entire form.  Example $('#myform').setFormValidation()
//		addValidation() - add validation to a form element
//		removeValidation() - removes validation to a form element
//		checkValidation() - has a form element passed validation.  Returns true/false
// 		validateForm(callExtFunction) - does the entire form pass validation.  Returns true/false.  If you don't want the formValidationFail or formValidationPass called, pass false to callExtFunction 
//		
// 
//////////////////////////////////////////////////////////////////////////////////////////////////////
